from openai import OpenAI
from Models.CustomLLM.agent import Agent
import json
from Models.Data.db_init import mongo_operator

class IntentionAgent(Agent):
    def __init__(self):
        super(IntentionAgent, self).__init__()
    def parse_json(self, jsonfile):
        completion_json = json.loads(jsonfile)
        return json.loads(completion_json["choices"][0]["message"]["content"])

    def parse_normal(self, file):
        completion_json = json.loads(file)
        return completion_json["choices"][0]["message"]["content"]

    def get_response(self,prompt, isJson = True):
        completion = self.client.chat.completions.create(
        model="qwen-plus",
        messages=[
            {"role": "assistant", "content": "你是一个严格按照用户要求进行思考执行的助手，请仔细阅读用户的要求，并严格按要求输出。"},
            {"role": "user", "content": f"{prompt}"},
        ],
        )
        if isJson:
            return self.parse_json(completion.model_dump_json())
        else:
            return self.parse_normal(completion.model_dump_json())

    def chat_with_memories(self,messages_history, current_sense, required_memories):
        
        if current_sense:
            messages_history[-1]["content"] = messages_history[-1]["content"] + f"\n（请考虑当前用户情绪：{current_sense}）"
        completion = self.client.chat.completions.create(
        model="qwen-plus",
        messages=messages_history,
        )
        first_response = self.parse_normal(completion.model_dump_json())
        polished_response = self.polish_response(first_response, required_memories)
        return polished_response


    def Intent_Recognition(self,query):
        prompt = f"""
            请严格遵循以下处理流程分析用户问题：

            # 任务说明
            需要同时完成两个判断：
            1. 问诊判断：是否需要进行疾病诊断
            2. 意图识别：从16个医学查询类别中选择相关意图

            # 输出格式要求
            {{
                "问诊": "是/否",  # 必须二选一
                "查询类别": []     # 从下列列表选择（最多5个）
            }}

            # 预定义查询类别（严禁新增）
            ["查询疾病简介", "查询疾病病因", "查询疾病预防措施", "查询疾病治疗周期", "查询治愈概率", "查询疾病易感人群", "查询疾病所需药品", "查询疾病宜吃食物", "查询疾病忌吃食物", "查询疾病所需检查项目", "查询疾病所属科目", "查询疾病的症状", "查询疾病的治疗方法", "查询疾病的并发疾病"]

            # 问诊判断标准（满足任一即标记为"是"）
            ■ 用户描述自身/他人具体症状（如：我头痛三天了）
            ■ 包含诊断相关动词（检查/诊断/判断/是不是/会不会）
            ■ 使用第一/第二/第三人称描述病症（我/他/孩子）
            ■ 询问疾病可能性（可能是什么病/会得XX病吗）
            ■ 呈现未确诊状态（不确定是否患病）

            # 意图识别原则
            1. 所有疾病相关查询必须包含"查询疾病简介"
            2. 每个意图必须能在用户问题中找到对应依据
            3. 优先选择显性意图，隐性意图需有逻辑关联
            4. 保持意图数量≤5

            # 处理流程
            1. 语义分析：解析用户问题的主谓宾结构
            2. 问诊判断：根据标准判断是否需要诊断
            3. 意图匹配：逐条检查16个类别匹配度
            4. 结果验证：确保不超出限定范围

            # 关键示例
            ━━ 示例1 ━━
            输入："最近总是胃痛反酸，可能是什么问题？"
            输出：{{
                "问诊": "是",  # 描述症状+询问可能性
                "查询类别": ["查询疾病简介","查询疾病的症状","查询疾病病因"]
            }}

            ━━ 示例2 ━━
            输入："糖尿病患者应该怎么吃？"
            输出：{{
                "问诊": "否",  # 已明确疾病名称
                "查询类别": ["查询疾病简介","查询疾病宜吃食物","查询疾病忌吃食物"]
            }}

            ━━ 示例3 ━━
            输入："如何判断自己有没有高血压？"
            输出：{{
                "问诊": "是",  # 包含诊断动词"判断"
                "查询类别": ["查询疾病简介","查询疾病所需检查项目","查询疾病的症状"]
            }}

            ━━ 示例4 ━━
            输入："宝宝发烧38度该怎么办？"
            输出：{{
                "问诊": "是",  # 使用亲属称谓+症状描述
                "查询类别": ["查询疾病简介","查询疾病的治疗方法","查询疾病所需药品"]
            }}

            ━━ 示例5 ━━
            输入："肺癌的早期症状有哪些？"
            输出：{{
                "问诊": "否",  # 常规知识查询
                "查询类别": ["查询疾病简介","查询疾病的症状"]
            }}

            # 错误示例警示
            × 错误输出：{{"问诊": "yes", ...}} → 必须用中文"是/否"
            × 错误输出：查询类别包含"问诊建议" → 严禁新增类别
            × 错误输出：意图超过5个 → 需优先级筛选

            # 当前待处理问题
            输入："{query}"
            请严格按格式输出JSON（不需要带中文注释）：
            """
        return self.get_response(prompt)

    def text2cypher(self, query, entities, intentions):
        prompt =  f"""
        你是一位专业的 Neo4j 和 Cypher 语言专家，你的任务是根据用户提供的原始问题、从问题中提取的实体，以及一个预先分析好的意图对象，为医学知识图谱生成一个或多个精确的 Cypher 查询语句。

        # 图谱 Schema 定义:
        
        ## 节点标签及其主要属性:
        - **疾病 (Disease)**:
          - `名称` (字符串): 疾病的名称 (例如："感冒")
          - `描述` (字符串): 疾病的详细描述
          - `疾病简介` (字符串): 疾病的简要介绍
          - `疾病易感人群` (字符串): 哪些人群更容易患上此疾病
          - `治愈概率` (字符串): 疾病治愈的可能性 (例如： "约90%")
          - `治疗周期` (字符串): 完成治疗大概需要的时间范围 (例如："2-4周")
          - `治疗时长` (字符串): 单次治疗或整体治疗所需时间
          - `疾病病因` (字符串): 导致疾病发生的原因
          - `预防措施` (字符串): 如何预防此疾病
        - **症状 (Symptom)**:
          - `名称` (字符串): 症状的名称 (例如："咳嗽")
        - **食物 (Food)**:
          - `名称` (字符串): 食物的名称 (例如："梨")
        - **治疗方案 (TreatmentPlan)**:
          - `名称` (字符串): 治疗方案的名称 (例如："抗病毒治疗")
        - **药物 (Drug)**:
          - `名称` (字符串): 药物的名称 (例如："奥司他韦")
        - **一级科室 (PrimaryDepartment)**:
          - `名称` (字符串): 一级科室的名称 (例如："内科")
        - **二级科室 (SecondaryDepartment)**:
          - `名称` (字符串): 二级科室的名称 (例如："呼吸内科")
        - **检查手段 (MedicalTest)**:
          - `名称` (字符串): 医学检查方法的名称 (例如："血常规")
        - **食谱 (Recipe)**:
          - `名称` (字符串): 食谱的名称 (例如："冰糖雪梨")
        - **其他 (OtherDepartment)**:
          - `名称` (字符串): 其他类型科室/实体的名称
        
        ## 关系类型:
        - `(疾病)-[:疾病的症状]->(症状)`
        - `(疾病)-[:疾病宜吃食物]->(食物)`
        - `(疾病)-[:疾病忌吃食物]->(食物)`
        - `(疾病)-[:治疗方法]->(治疗方案)`
        - `(疾病)-[:疾病并发症]->(疾病)`
        - `(疾病)-[:疾病所属科室]->(一级科室)`
        - `(疾病)-[:疾病所属科室]->(二级科室)`
        - `(疾病)-[:疾病所属科室]->(其他)`
        - `(疾病)-[:疾病所需检查]->(检查手段)`
        - `(疾病)-[:疾病推荐食谱]->(食谱)`
        - `(二级科室)-[:科室归属]->(一级科室)`
        - `(疾病)-[:推荐药物]->(药物)`
        - `(疾病)-[:疾病简介]->(Property)` // 假设"疾病简介"等属性也可能通过关系查询，或直接作为节点属性
        - `(疾病)-[:疾病病因]->(Property)`
        - `(疾病)-[:预防措施]->(Property)`
        - `(疾病)-[:治疗周期]->(Property)`
        - `(疾病)-[:治愈概率]->(Property)`
        - `(疾病)-[:疾病易感人群]->(Property)`
        
        # 用户输入及分析结果:
        - **原始查询 (Original Query):** `{query}`
        - **实体 (Entities JSON):** `{entities}` (例如: `{{"疾病": ["感冒"], "症状": ["头痛"]}}`)
        - **意图分析输出 (Intention Output JSON):** `{intentions}`
          (格式示例: `{{"问诊": "是", "查询类别": ["查询疾病简介", "查询疾病的症状", "查询疾病易感人群"]}}`)
        
        # 你的任务:
        1.  仔细分析 `意图分析输出 (Intention Output JSON)` 中的 `"查询类别"` 列表。
        2.  根据列表中的每一个类别，结合 `实体 (Entities JSON)` 和 `原始查询 (Original Query)`，生成对应的 Cypher 查询语句。
        3.  如果实体中包含疾病名称，查询应围绕该疾病展开。如果实体中包含症状，查询可能需要先通过症状找到所有必须是所有相关疾病，只有获取所有相关可能的疾病才有可能之后综合其他信息进行判断。找出所有疾病之后再根据"查询类别"获取其他信息。
        4.  确保生成的查询准确反映了"查询类别"的需求。例如，如果"查询类别"包含"查询疾病易感人群"，则必须生成获取相应疾病"易得人群"信息的查询。
        5.  **每个查询语句应该单独一行。**
        6.  **请只返回 Cypher 查询本身，不要包含任何解释性文字或 Markdown 格式。**
        7.  当匹配节点属性时，优先使用 `名称` 属性。如果实体值不确定是哪个属性，可以考虑使用 `CONTAINS` 进行模糊匹配，或精确匹配（如果实体明确）。
        8.  对于返回疾病属性（如简介、病因、易得人群等），如果这些是疾病节点的直接属性，则直接 RETURN `d.属性名`。如果它们是通过特定关系连接的（如上 Schema 中假设的 Property 节点），则相应调整查询。鉴于 Schema 中这些多为疾病属性，请优先按节点属性处理，例如 `RETURN d.疾病简介, d.易得人群`。
        
        # 示例:
        假设 `Intention Output JSON` 为: `{{"问诊": "是", "查询类别": ["查询疾病简介", "查询疾病的症状", "查询疾病易感人群"]}}`
        假设 `Entities JSON` 为: `{{"疾病": ["感冒"]}}`
        你可能生成的 Cypher 是 (每个查询占一行):
        MATCH (d:疾病 {{名称: "感冒"}}) RETURN d.名称 AS 疾病名称, d.疾病简介 AS 简介, d.易得人群 AS 易得人群
        MATCH (d:疾病 {{名称: "感冒"}})-[:疾病的症状]->(s:症状) RETURN s.名称 AS 症状
        
        # 开始生成 Cypher:
        """
        response = self.get_response(prompt,isJson=False)

        cypher_queries_raw = response.strip().split('\n')
        cypher_queries = [query.strip() for query in cypher_queries_raw if query.strip()]
        
        return cypher_queries

    def cypher2kgans(self, cypher_results_json, query, entities, intentions,self_info):
        prompt = f"""
        你是一位具备深厚医学知识和出色知识图谱分析能力的AI专家。你的核心职责是，综合、深入地分析用户提供的所有信息，包括原始问题、识别出的实体、系统判定的意图以及从知识图谱中检索到的结构化数据，并基于此提供专业、准确的医学诊断推断和相关建议。

        # 输入信息 (请严格按照以下字段及格式提供):
        
        1.  **用户原始问题 (Original Query):**
            用户输入的原始文本。
            `{query}`
        
        2.  **问题中识别的实体 (Entities JSON):**
            从用户问题中识别出的医学相关实体，以JSON格式提供。键为实体类别，值为实体名称列表。
            `{entities}`
            (例如: `{{"疾病": ["感冒"], "症状": ["头痛", "发烧"]}}`)
        
        3.  **系统意图分析输出 (Intention Output JSON):**
            系统对用户意图的分析结果，以JSON格式提供。必须包含 `"问诊"` 字段（值为 `"是"` 或 `"否"`），以及可选的 `"查询类别"` 列表。
            `{intentions}`
            (格式示例: `{{"问诊": "是", "查询类别": ["查询疾病简介", "查询疾病的症状"]}}`)
        
        4.  **知识图谱查询结果 (Cypher Query Results JSON):**
            执行知识图谱查询（例如使用Cypher语句）后返回的结构化数据，已格式化为JSON。这些结果是支持你分析和回答的关键证据。
            `{cypher_results_json}`

        5.  **用户个人信息 (Personal Information):**
            用户的个人信息，如年龄、性别、既往病史、过敏史等（如果提供）。请谨慎且仅在医学上相关时使用。
            `{self_info}`
        
        # 你的任务与输出要求:
        
        基于对上述所有输入信息的全面分析和整合，请按照以下结构生成你的回复。回复必须严格采用本任务末尾指定的JSON格式。
        
        **A. 核心回应 (根据"问诊"意图调整):**
        
        * **如果 `系统意图分析输出` 中的 `"问诊"` 值为 `"是"`:**
            1.  **最可能的疾病诊断:**
                * 基于用户描述的症状、识别出的实体、用户个人信息（如适用）以及从知识图谱中获得的证据，推断出**一种**最核心、最可能的疾病诊断。一定要参考知识图谱查询结果中可能存在的疾病实体的特征（例如名称，易感人群，患病概率等等）、检测到的实体特征与用户个人信息之间的关联
                * **仅**提供该疾病的规范名称。
            2.  **诊断理由:**
                * 简要、专业地阐述支持该诊断的理由。请结合用户描述的关键症状/实体，以及知识图谱中关于该疾病与这些症状、易感人群、关联因素等的关联信息。清晰地说明你的推断过程。
            3.  **所属科室:**
                * 指出该疾病主要归属的医疗科室。优先从知识图谱结果中提取最相关的科室信息。
                * 格式要求：`[二级科室名称]` (例如: `呼吸内科`)。如果知识图谱仅提供一级科室或没有更具体的科室信息，则提供 `一级科室名称` 或 `其他名称`。(注意，图谱中"其他"也是科室）
        
        * **如果 `系统意图分析输出` 中的 `"问诊"` 值为 `"否"`:**
            1.  **信息总结:**
                * 根据 `系统意图分析输出` 中的 `查询类别` 列表，并主要基于 `知识图谱查询结果`，对用户查询的核心内容进行专业、简洁的总结。例如，如果查询的是"糖尿病的饮食注意事项"，则总结相关的饮食原则和要点。
            2.  **相关科室 (如果适用):**
                * 如果查询内容涉及特定疾病或医学领域，根据知识图谱结果列出相关的医疗科室。
                * 格式要求同上。
        
        **B. 补充信息 (基于查询类别和图谱结果的扩展):**
        
        * 根据 `系统意图分析输出` 中的 `查询类别` 列表，以及 `知识图谱查询结果` 中与这些类别最相关且有价值的信息，提供额外的补充内容。
        * 这部分应包含用户可能进一步关心的信息，例如：其他常见症状、病因、预防措施、饮食建议、检查方法、治疗方案概要等。
        * 补充信息应直接从知识图谱结果中提取或总结，并组织成清晰的键值对形式。**键名应根据具体内容动态生成**（例如："其他常见症状"、"建议检查"、"预防方法"等）。
        
        **C. 专业建议与重要提醒:**
        
        * 提供通用的、基于医学常识的健康建议。
        * **如果 `"问诊"` 为 `"是"`:** 务必以醒目的方式强调：你的分析和诊断推断仅为基于当前提供信息的初步判断，**不能替代专业的医疗诊断**。强烈建议用户尽快前往正规医院，由执业医师进行面对面诊查、必要的医学检查以获得明确诊断，并严格遵医嘱进行治疗。
        * **如果 `"问诊"` 为 `"否"`:** 提示用户提供的信息（特别是知识图谱结果）仅供参考，不能替代专业医疗建议。
        
        # 严格输出JSON格式要求:
        
        请将你的全部回复内容封装在一个JSON对象中，其结构必须完全符合以下模板。
        
        * **当 `"问诊"` 值为 `"是"` 时, 结构体如下:**
            {{
              "问诊": "是",
              "核心回应": {{
                "最可能的疾病诊断": "在此填写推断出的疾病名称",
                "诊断理由": "在此填写详细的诊断理由，结合症状、实体、个人信息（如适用）和知识图谱证据",
                "所属科室": "在此填写对应的科室名称，如：呼吸内科"
              }},
              "补充信息": {{
                "键名1": "值1（基于图谱结果和查询类别）",
                "键名2": ["值a", "值b", "..."],
                // ... 根据知识图谱结果和查询类别动态生成更多键值对
                "其他常见症状": ["例如：鼻塞", "例如：流涕"],
                "饮食建议": "例如：多饮水，清淡饮食"
                // ... 其他可能的补充信息，如预防、检查、治疗概要等
              }},
              "专业建议与重要提醒": "在此填写常识性建议和针对问诊场景的免责声明"
            }}
        
        * **当 `"问诊"` 值为 `"否"` 时, 回复结构体如下:**
            {{
              "问诊": "否",
              "核心回应": {{
                "信息总结": "在此填写对用户查询内容的总结，基于图谱结果",
                "相关科室": "在此填写相关的科室名称，如：内分泌科"
              }},
              "补充信息": {{
                "键名1": "值1（基于图谱结果和查询类别）",
                "键名2": ["值a", "值b", "..."],
                // ... 根据知识图谱结果和查询类别动态生成更多键值对
                "宜吃食物": ["例如：粗粮"],
                "忌吃食物": ["例如：高糖食物"]
                // ... 其他可能的补充信息
              }},
              "专业建议与重要提醒": "在此填写常识性建议和针对非问诊场景的提示"
            }}
           
        
        请注意：
        * JSON键名必须使用双引号。
        * 所有字符串值都必须进行适当的JSON转义。
        * `补充信息` 内部的键值对完全依赖于 `查询类别` 和 `知识图谱查询结果` 的内容，请根据实际情况动态生成最相关、最有用的信息，并使用具有描述性的键名。
        
        # 开始分析和回答:
        
        请现在开始分析提供的输入信息，并生成符合上述要求的JSON格式回复, 但是输出时不允许携带```json 字样s。

        """
        response = self.get_response(prompt)
        return response

    def construct_system_prompt(self, query, knowledge, all_information):
        self_info = all_information.get("self_info")
        memories = all_information.get("memories")
        health_record = all_information.get("health_record")
        knowledge_from_graph = knowledge.get("knowledge_from_graph")
        knowledge_from_chroma = knowledge.get("knowledge_from_chroma")
        user_query = query
        prompt = f"""
               你是一个专业的**医学会话机器人**。你的核心目标是根据用户提供的症状、疑问以及你所拥有的专业知识，提供准确、有帮助且负责任的**诊断性或医学相关**的回答。

               **重要核心指令：你的回答必须是纯文本，其格式必须严格遵守以下规范，以确保文本既可以流畅朗读，也可以作为规范的书面文字阅读：**
               1.  **输出格式严格限定为自然的段落形式。** 每个段落应当由完整的句子组成，逻辑连贯清晰。避免使用列表、项目符号或任何非段落结构。
               2.  **严禁在回答中使用任何Markdown标记。** 例如，绝对禁止使用 `**` (粗体), `*` (斜体或列表项), `_` (斜体), `##` (标题), `------` (任何形式的水平分隔线), `---` (任何形式的水平分隔线), `>` (引用块), 以及其他所有Markdown语法。
               3.  **仅允许使用标准的中文标点符号。** 具体包括：句号（。）、逗号（，）、问号（？）、感叹号（！）、顿号（、）、分号（；）、冒号（：）、中文引号（“ ” ‘ ’）、中文括号（（ ）【 】《 》）。除这些基本标点外，不得使用任何其他符号。
               4.  **绝对禁止使用任何视觉分隔元素、非标准排版符号、特殊字符或表情符号。** 例如，禁止使用 `——————` 这类长破折号或其他任何类型的线条。
               5.  **内容应简洁扼要，同时确保表述的完整性和自然流畅性。** 文本需适合直接朗读，没有任何会干扰朗读的非文本元素或不自然的格式。

               你的回答应以清晰、易懂的方式呈现，并始终强调专业医疗建议的重要性。
       ---

       **请根据以下信息，综合分析并生成对用户原始查询的回答：**

       1.  **关于你自身的信息 (`self_info`)**：
           {self_info}
           *请记住你是一个AI助手，无法进行面对面诊疗或开具处方。你的回答是基于已知信息和算法，不能替代专业的医疗诊断。*

       2.  **你的模型偏好/记忆 (`memories`)**：
           {memories}
           *请根据这些偏好调整你的语气、风格和回答的详细程度，使其更符合预设的"记忆"模式，例如：保持同理心、避免使用过于专业的医学术语，或保持简洁明了。*

       3.  **来自知识图谱的结构化知识 (`knowledge_from_graph`)**：
           {knowledge_from_graph}
           *这些是经过验证的、结构化的医学知识，如疾病的定义、症状、病因、常见治疗方案、药物相互作用等。请优先引用和整合这些信息，以确保回答的**准确性和权威性**。*

       4.  **来自向量数据库的语义知识 (`knowledge_from_chroma`)**：
           {knowledge_from_chroma}
           *这些知识可能包括相关的研究文献摘要、病例分析、专家观点或非结构化的文本信息。请将其作为补充和扩展，帮助你理解用户查询的深层含义或提供更细致的背景信息。在使用时，请注意其可靠性，并与知识图谱的结构化信息进行交叉验证。*

       5.  **用户原始的查询 (`user_query`)**：
           {user_query}
           *这是用户直接提出的问题或描述的症状。你的回答必须直接针对这个查询，并尝试提供最相关的医学见解。*

       6.  **用户历史曾有的健康记录 (`health_record`)**：
           {health_record}
           *这是用户过去曾有的健康记录。你的回答必须将其结合，思考诊断的方案是否需要调整。*

       ---

       **回答生成步骤与要求：**

       1.  **理解与识别**：仔细分析`user_query`，识别核心问题、症状或请求。在`knowledge_from_graph`和`knowledge_from_chroma`中寻找最相关的医学概念。
       2.  **信息整合与筛选**：将两个知识库的相关信息进行整合，**以知识图谱的权威信息为基础**，用向量数据库的知识进行补充。根据`memories`调整信息呈现的详略和语言风格。
       3.  **构建医学回答**：
           * 根据knowledge_from_chroma中内容整合可能的合适的治疗手段
           * 直接回答核心问题。
           * 解释相关医学概念。
           * 基于症状，给出**可能的疾病或情况列表**（强调"可能"，不作确诊）。
           * 基于疾病，给出可能的治疗方案。
           * **建议后续行动**：始终建议用户**寻求专业医生诊断**，并明确指出AI无法替代医生。
           * 对于紧急或严重症状，务必强调立即就医。
           * 如果信息充足且安全，可以给出一些初步的、非诊断性的生活调整或观察建议。
       4.  **语言风格要求**：使用清晰、简洁、易懂的自然语言，避免不必要的医学术语。语气应专业、严谨，同时根据`memories`保持适当的同理心。**关键信息应通过清晰的措辞和句子结构来自然强调，严禁使用任何特殊格式（如加粗、下划线等）进行强调。**
       5.  **输出格式严格要求（再次强调并细化）**：
           * **必须以自然的、连续的段落形式呈现所有内容。** 将回答组织成一篇流畅的文章，而非零散的条目。
           * **严禁使用任何Markdown标记**，包括但不限于 `**`, `*`, `_`, `#`, `---`, `------`, `>` 等。
           * **仅允许使用标准的中文标点符号**：句号（。）、逗号（，）、问号（？）、感叹号（！）、顿号（、）、分号（；）、冒号（：）、中文引号（“ ” ‘ ’）、中文括号（（ ）【 】《 》）。除此之外，不得包含任何其他特殊符号或字符。
           * **绝对禁止使用任何类型的视觉分隔线（如 `---`, `***`, `——————` 等）、非标准排版符号或表情符号。**
           * **确保输出的纯文本适合直接朗读和屏幕阅读，没有任何干扰性格式。**
       6.  **多轮对话能力与格式一致性**：
           * **在多轮对话中，必须记住并理解对话的完整上下文**（结合 `memories`、`health_record` 及本轮之前的交流内容）。
           * 后续回答应**自然地衔接之前讨论过的内容**，形成连贯的对话流。
           * **至关重要：每一轮的回答都必须严格遵守本提示开头部分及第5点所规定的所有格式要求**，确保输出风格的绝对一致性。
       7.  **负责任的声明**：在回答结束时，**务必包含以下标准的医学免责声明。**

       ---

       **请严格按照以上所有指令生成你的回答。尤其注意，回答的格式必须是纯净的、仅包含基本标点符号的段落式文本，严禁任何形式的Markdown标记或不必要的符号。**

       """
        return prompt
    
    def polish_response(self, response, memories):
        prompt = f"""
        请你严格按照下面数组中的content作为要求为输入的回答进行润色。润色时，不应该改变内容，而仅仅改变文字的表达方式。
        不需要你说明这是不是润色后的结果，只需要输出润色后的最终结果。
        最终结果应当与response一样是文章格式，不能出现其它的markdown格式，要应当保持一样的符号。
        再一次声明！！：我需要你仅仅输出改变输入的回答的表达方式后的文本结果，而不要输出任何解释。并且保持与原回答相同的文章格式和标点符号。
        此为润色要求：
        {memories}

        此为输入的回答：
        {response}

        请严格遵循以上要求，输出润色后的回答：

        """
        response = self.get_response(prompt, isJson=False)
        return response


    def get_report_data(self, userid, sessionid):

        session_data = mongo_operator.getSessionData(sessionid,userid)
        prompt = f"""
    你是一个专业的医疗报告生成助手。
    你的任务是根据提供的用户会话历史数据和用户的通用信息，生成一份结构化的医疗报告。

    请严格遵循以下输出要求：
    1.  **格式**: 必须且只能输出一个JSON对象。不要包含任何额外的文字、解释、前缀、后缀或Markdown代码块以外的内容。请确保输出的JSON是完整的，并且没有被截断。
    2.  **结构**: 严格按照提供的JSON格式示例进行输出，包括所有键名（如 "一般项目", "主诉", "现病史", "既往史" 等）和嵌套结构。
    3.  **内容**:
        * **会话数据 (session_data)**：这是用户与系统的对话记录，包含以下字段：`title`, `userid`, `sessionid`, `messages` (对话消息列表), `timestamp` (会话记录时间)。请主要利用`messages`字段来总结"主诉"和"现病史"，利用`timestamp`填充"记录时间"。
            会话数据如下：
        ——————————————————————————
            {session_data}

        ——————————————————————————————
        * **缺失信息处理**: 如果某些字段在提供的数据中找不到或无法推断，请使用空字符串 `""` 代替。对于文本字段（如主诉、现病史、既往史），如果内容有多行，请使用`\\n`表示换行。
        输出JSON格式示例（请严格遵循此格式，包括键名、顺序和层级）：
                {{
            "一般项目": {{
                "姓名": "张三",
                "性别": "男",
                "年龄": "42岁",
                "血型": "A型",
                "身高": "175cm",
                "体重": "70kg",
                "联系方式": "13800138000",
                "邮箱": "zhangsan@example.com",
                "紧急联系人": "李四 电话13900139000",
                "记录时间": "2025-05-09 10:00"
            }},
            "主诉": "反复咳嗽、咳痰一周，伴有轻微胸闷。",
            "现病史": "患者于一周前无明显诱因出现咳嗽，初为干咳，后转为咳白色粘痰，不易咳出。\\n伴有活动后轻微胸闷，无发热、盗汗、咯血等症状。\\n曾自行服用止咳糖浆，效果不佳。饮食睡眠尚可，二便正常，体重无明显变化。",
            "既往史": "高血压病史5年，口服"硝苯地平缓释片"治疗，血压控制尚可。\\n否认糖尿病、心脏病史。\\n否认肝炎、结核等传染病史。\\n无药物过敏史，无手术外伤史。"
        }}

        请根据上述指示，立即生成医疗报告的JSON内容：

        """
        response = self.get_response(prompt)
        return response



if __name__ == "__main__":
    agent = IntentionAgent()
    print(agent.Intent_Recognition("近半年我的饭量突然减小、讨厌吃甜而且经常口体重上升。您好我是得了糖尿病吗？")["问诊"])
